{"version":3,"file":"MacUpdater.js","sourceRoot":"","sources":["../src/MacUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, newError, safeStringifyJson } from \"builder-util-runtime\"\nimport { stat } from \"fs-extra\"\nimport { createReadStream } from \"fs\"\nimport { createServer, IncomingMessage, ServerResponse } from \"http\"\nimport { AddressInfo } from \"net\"\nimport { AppAdapter } from \"./AppAdapter\"\nimport { AppUpdater, DownloadUpdateOptions } from \"./AppUpdater\"\nimport { ResolvedUpdateFileInfo } from \"./main\"\nimport { findFile } from \"./providers/Provider\"\nimport AutoUpdater = Electron.AutoUpdater\n\nexport class MacUpdater extends AppUpdater {\n  private readonly nativeUpdater: AutoUpdater = require(\"electron\").autoUpdater\n\n  private squirrelDownloadedUpdate = false\n\n  constructor(options?: AllPublishOptions, app?: AppAdapter) {\n    super(options, app)\n\n    this.nativeUpdater.on(\"error\", it => {\n      this._logger.warn(it)\n      this.emit(\"error\", it)\n    })\n    this.nativeUpdater.on(\"update-downloaded\", () => {\n      this.squirrelDownloadedUpdate = true\n    })\n  }\n\n  protected doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>> {\n    let files = downloadUpdateOptions.updateInfoAndProvider.provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info)\n\n    // Allow arm64 macs to install universal or rosetta2(x64) - https://github.com/electron-userland/electron-builder/pull/5524\n    const isArm64 = (file: ResolvedUpdateFileInfo) => file.url.pathname.includes(\"arm64\")\n    if (files.some(isArm64)) {\n      files = files.filter(file => (process.arch === \"arm64\") === isArm64(file))\n    }\n\n    const zipFileInfo = findFile(files, \"zip\", [\"pkg\", \"dmg\"])\n    if (zipFileInfo == null) {\n      throw newError(`ZIP file not provided: ${safeStringifyJson(files)}`, \"ERR_UPDATER_ZIP_FILE_NOT_FOUND\")\n    }\n\n    const server = createServer()\n    server.on(\"close\", () => {\n      this._logger.info(`Proxy server for native Squirrel.Mac is closed (was started to download ${zipFileInfo.url.href})`)\n    })\n\n    function getServerUrl(): string {\n      const address = server.address() as AddressInfo\n      return `http://127.0.0.1:${address.port}`\n    }\n\n    return this.executeDownload({\n      fileExtension: \"zip\",\n      fileInfo: zipFileInfo,\n      downloadUpdateOptions,\n      task: (destinationFile, downloadOptions) => {\n        return this.httpExecutor.download(zipFileInfo.url, destinationFile, downloadOptions)\n      },\n      done: async event => {\n        const downloadedFile = event.downloadedFile\n        let updateFileSize = zipFileInfo.info.size\n        if (updateFileSize == null) {\n          updateFileSize = (await stat(downloadedFile)).size\n        }\n\n        return await new Promise<Array<string>>((resolve, reject) => {\n          // insecure random is ok\n          const fileUrl = `/${Date.now()}-${Math.floor(Math.random() * 9999)}.zip`\n          server.on(\"request\", (request: IncomingMessage, response: ServerResponse) => {\n            const requestUrl = request.url!\n            this._logger.info(`${requestUrl} requested`)\n            if (requestUrl === \"/\") {\n              const data = Buffer.from(`{ \"url\": \"${getServerUrl()}${fileUrl}\" }`)\n              response.writeHead(200, { \"Content-Type\": \"application/json\", \"Content-Length\": data.length })\n              response.end(data)\n              return\n            }\n\n            if (!requestUrl.startsWith(fileUrl)) {\n              this._logger.warn(`${requestUrl} requested, but not supported`)\n              response.writeHead(404)\n              response.end()\n              return\n            }\n\n            this._logger.info(`${fileUrl} requested by Squirrel.Mac, pipe ${downloadedFile}`)\n\n            let errorOccurred = false\n            response.on(\"finish\", () => {\n              try {\n                setImmediate(() => server.close())\n              } finally {\n                if (!errorOccurred) {\n                  this.nativeUpdater.removeListener(\"error\", reject)\n                  resolve([])\n                }\n              }\n            })\n\n            const readStream = createReadStream(downloadedFile)\n            readStream.on(\"error\", error => {\n              try {\n                response.end()\n              } catch (e) {\n                this._logger.warn(`cannot end response: ${e}`)\n              }\n              errorOccurred = true\n              this.nativeUpdater.removeListener(\"error\", reject)\n              reject(new Error(`Cannot pipe \"${downloadedFile}\": ${error}`))\n            })\n\n            response.writeHead(200, {\n              \"Content-Type\": \"application/zip\",\n              \"Content-Length\": updateFileSize,\n            })\n            readStream.pipe(response)\n          })\n          server.listen(0, \"127.0.0.1\", () => {\n            this.nativeUpdater.setFeedURL({\n              url: getServerUrl(),\n              headers: { \"Cache-Control\": \"no-cache\" },\n            })\n\n            // The update has been downloaded and is ready to be served to Squirrel\n            this.dispatchUpdateDownloaded(event)\n\n            if (this.autoInstallOnAppQuit) {\n              this.nativeUpdater.once(\"error\", reject)\n              // This will trigger fetching and installing the file on Squirrel side\n              this.nativeUpdater.checkForUpdates()\n            } else {\n              resolve([])\n            }\n          })\n        })\n      },\n    })\n  }\n\n  quitAndInstall(): void {\n    if (this.squirrelDownloadedUpdate) {\n      // Update already fetched by Squirrel, it's ready to install\n      this.nativeUpdater.quitAndInstall()\n    } else {\n      // Quit and install as soon as Squirrel get the update\n      this.nativeUpdater.on(\"update-downloaded\", () => {\n        this.nativeUpdater.quitAndInstall()\n      })\n\n      // And trigger the update\n      this.nativeUpdater.checkForUpdates()\n    }\n  }\n}\n"]}